{"ast":null,"code":"var _jsxFileName = \"/project/notion-clone/components/editablePage/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport EditableBlock from \"../editableBlock\";\nimport Notice from \"../notice\";\nimport { usePrevious } from \"../../hooks\";\nimport { objectId, setCaretToEnd } from \"../../utils\"; // A page is represented by an array containing several blocks\n// [\n//   {\n//     _id: \"5f54d75b114c6d176d7e9765\",\n//     html: \"Heading\",\n//     tag: \"h1\",\n//     imageUrl: \"\",\n//   },\n//   {\n//     _id: \"5f54d75b114c6d176d7e9766\",\n//     html: \"I am a <strong>paragraph</strong>\",\n//     tag: \"p\",\n//     imageUrl: \"\",\n//   },\n//     _id: \"5f54d75b114c6d176d7e9767\",\n//     html: \"/im\",\n//     tag: \"img\",\n//     imageUrl: \"images/test.png\",\n//   }\n// ]\n\nconst EditablePage = ({\n  id,\n  fetchedBlocks,\n  err\n}) => {\n  if (err) {\n    return __jsx(Notice, {\n      status: \"ERROR\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Something went wrong \\uD83D\\uDC94\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"Have you tried to restart the app at '/' ?\"));\n  }\n\n  const router = useRouter();\n  const {\n    0: blocks,\n    1: setBlocks\n  } = useState(fetchedBlocks);\n  const {\n    0: currentBlockId,\n    1: setCurrentBlockId\n  } = useState(null);\n  const prevBlocks = usePrevious(blocks); // Update the database whenever blocks change\n\n  useEffect(() => {\n    const updatePageOnServer = async blocks => {\n      try {\n        await fetch(`${process.env.NEXT_PUBLIC_API}/pages/${id}`, {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            blocks: blocks\n          })\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (prevBlocks && prevBlocks !== blocks) {\n      updatePageOnServer(blocks);\n    }\n  }, [blocks, prevBlocks]); // Handling the cursor and focus on adding and deleting blocks\n\n  useEffect(() => {\n    // If a new block was added, move the caret to it\n    if (prevBlocks && prevBlocks.length + 1 === blocks.length) {\n      const nextBlockPosition = blocks.map(b => b._id).indexOf(currentBlockId) + 1 + 1;\n      const nextBlock = document.querySelector(`[data-position=\"${nextBlockPosition}\"]`);\n\n      if (nextBlock) {\n        nextBlock.focus();\n      }\n    } // If a block was deleted, move the caret to the end of the last block\n\n\n    if (prevBlocks && prevBlocks.length - 1 === blocks.length) {\n      const lastBlockPosition = prevBlocks.map(b => b._id).indexOf(currentBlockId);\n      const lastBlock = document.querySelector(`[data-position=\"${lastBlockPosition}\"]`);\n\n      if (lastBlock) {\n        setCaretToEnd(lastBlock);\n      }\n    }\n  }, [blocks, prevBlocks, currentBlockId]);\n\n  const deleteImageOnServer = async imageUrl => {\n    // The imageUrl contains images/name.jpg, hence we do not need\n    // to explicitly add the /images endpoint in the API url\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API}/pages/${imageUrl}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      await response.json();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateBlockHandler = currentBlock => {\n    const index = blocks.map(b => b._id).indexOf(currentBlock.id);\n    const oldBlock = blocks[index];\n    const updatedBlocks = [...blocks];\n    updatedBlocks[index] = _objectSpread(_objectSpread({}, updatedBlocks[index]), {}, {\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl\n    });\n    setBlocks(updatedBlocks); // If the image has been changed, we have to delete the\n    // old image file on the server\n\n    if (oldBlock.imageUrl && oldBlock.imageUrl !== currentBlock.imageUrl) {\n      deleteImageOnServer(oldBlock.imageUrl);\n    }\n  };\n\n  const addBlockHandler = currentBlock => {\n    setCurrentBlockId(currentBlock.id);\n    const index = blocks.map(b => b._id).indexOf(currentBlock.id);\n    const updatedBlocks = [...blocks];\n    const newBlock = {\n      _id: objectId(),\n      tag: \"p\",\n      html: \"\",\n      imageUrl: \"\"\n    };\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    updatedBlocks[index] = _objectSpread(_objectSpread({}, updatedBlocks[index]), {}, {\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl\n    });\n    setBlocks(updatedBlocks);\n  };\n\n  const deleteBlockHandler = currentBlock => {\n    if (blocks.length > 1) {\n      setCurrentBlockId(currentBlock.id);\n      const index = blocks.map(b => b._id).indexOf(currentBlock.id);\n      const deletedBlock = blocks[index];\n      const updatedBlocks = [...blocks];\n      updatedBlocks.splice(index, 1);\n      setBlocks(updatedBlocks); // If the deleted block was an image block, we have to delete\n      // the image file on the server\n\n      if (deletedBlock.tag === \"img\" && deletedBlock.imageUrl) {\n        deleteImageOnServer(deletedBlock.imageUrl);\n      }\n    }\n  };\n\n  const onDragEndHandler = result => {\n    const {\n      destination,\n      source\n    } = result; // If we don't have a destination (due to dropping outside the droppable)\n    // or the destination hasn't changed, we change nothing\n\n    if (!destination || destination.index === source.index) {\n      return;\n    }\n\n    const updatedBlocks = [...blocks];\n    const removedBlocks = updatedBlocks.splice(source.index - 1, 1);\n    updatedBlocks.splice(destination.index - 1, 0, removedBlocks[0]);\n    setBlocks(updatedBlocks);\n  };\n\n  const isNewPublicPage = router.query.public === \"true\";\n  return __jsx(React.Fragment, null, isNewPublicPage && __jsx(Notice, {\n    dismissible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Hey \\uD83D\\uDC4B You just created a public page.\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"It will be automatically deleted after 24 hours.\")), __jsx(DragDropContext, {\n    onDragEnd: onDragEndHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, __jsx(Droppable, {\n    droppableId: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, provided => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), blocks.map(block => {\n    const position = blocks.map(b => b._id).indexOf(block._id) + 1;\n    return __jsx(EditableBlock, {\n      key: block._id,\n      position: position,\n      id: block._id,\n      tag: block.tag,\n      html: block.html,\n      imageUrl: block.imageUrl,\n      pageId: id,\n      addBlock: addBlockHandler,\n      deleteBlock: deleteBlockHandler,\n      updateBlock: updateBlockHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    });\n  }), provided.placeholder))));\n};\n\nexport default EditablePage;","map":{"version":3,"sources":["/project/notion-clone/components/editablePage/index.js"],"names":["useState","useEffect","useRouter","DragDropContext","Droppable","EditableBlock","Notice","usePrevious","objectId","setCaretToEnd","EditablePage","id","fetchedBlocks","err","router","blocks","setBlocks","currentBlockId","setCurrentBlockId","prevBlocks","updatePageOnServer","fetch","process","env","NEXT_PUBLIC_API","method","credentials","headers","body","JSON","stringify","console","log","length","nextBlockPosition","map","b","_id","indexOf","nextBlock","document","querySelector","focus","lastBlockPosition","lastBlock","deleteImageOnServer","imageUrl","response","Accept","json","updateBlockHandler","currentBlock","index","oldBlock","updatedBlocks","tag","html","addBlockHandler","newBlock","splice","deleteBlockHandler","deletedBlock","onDragEndHandler","result","destination","source","removedBlocks","isNewPublicPage","query","public","provided","innerRef","droppableProps","block","position","placeholder"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport EditableBlock from \"../editableBlock\";\nimport Notice from \"../notice\";\nimport { usePrevious } from \"../../hooks\";\nimport { objectId, setCaretToEnd } from \"../../utils\";\n\n// A page is represented by an array containing several blocks\n// [\n//   {\n//     _id: \"5f54d75b114c6d176d7e9765\",\n//     html: \"Heading\",\n//     tag: \"h1\",\n//     imageUrl: \"\",\n//   },\n//   {\n//     _id: \"5f54d75b114c6d176d7e9766\",\n//     html: \"I am a <strong>paragraph</strong>\",\n//     tag: \"p\",\n//     imageUrl: \"\",\n//   },\n//     _id: \"5f54d75b114c6d176d7e9767\",\n//     html: \"/im\",\n//     tag: \"img\",\n//     imageUrl: \"images/test.png\",\n//   }\n// ]\n\nconst EditablePage = ({ id, fetchedBlocks, err }) => {\n  if (err) {\n    return (\n      <Notice status=\"ERROR\">\n        <h3>Something went wrong 💔</h3>\n        <p>Have you tried to restart the app at '/' ?</p>\n      </Notice>\n    );\n  }\n\n  const router = useRouter();\n  const [blocks, setBlocks] = useState(fetchedBlocks);\n  const [currentBlockId, setCurrentBlockId] = useState(null);\n\n  const prevBlocks = usePrevious(blocks);\n\n  // Update the database whenever blocks change\n  useEffect(() => {\n    const updatePageOnServer = async (blocks) => {\n      try {\n        await fetch(`${process.env.NEXT_PUBLIC_API}/pages/${id}`, {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            blocks: blocks,\n          }),\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    if (prevBlocks && prevBlocks !== blocks) {\n      updatePageOnServer(blocks);\n    }\n  }, [blocks, prevBlocks]);\n\n  // Handling the cursor and focus on adding and deleting blocks\n  useEffect(() => {\n    // If a new block was added, move the caret to it\n    if (prevBlocks && prevBlocks.length + 1 === blocks.length) {\n      const nextBlockPosition =\n        blocks.map((b) => b._id).indexOf(currentBlockId) + 1 + 1;\n      const nextBlock = document.querySelector(\n        `[data-position=\"${nextBlockPosition}\"]`\n      );\n      if (nextBlock) {\n        nextBlock.focus();\n      }\n    }\n    // If a block was deleted, move the caret to the end of the last block\n    if (prevBlocks && prevBlocks.length - 1 === blocks.length) {\n      const lastBlockPosition = prevBlocks\n        .map((b) => b._id)\n        .indexOf(currentBlockId);\n      const lastBlock = document.querySelector(\n        `[data-position=\"${lastBlockPosition}\"]`\n      );\n      if (lastBlock) {\n        setCaretToEnd(lastBlock);\n      }\n    }\n  }, [blocks, prevBlocks, currentBlockId]);\n\n  const deleteImageOnServer = async (imageUrl) => {\n    // The imageUrl contains images/name.jpg, hence we do not need\n    // to explicitly add the /images endpoint in the API url\n    try {\n      const response = await fetch(\n        `${process.env.NEXT_PUBLIC_API}/pages/${imageUrl}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      await response.json();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateBlockHandler = (currentBlock) => {\n    const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n    const oldBlock = blocks[index];\n    const updatedBlocks = [...blocks];\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl,\n    };\n    setBlocks(updatedBlocks);\n    // If the image has been changed, we have to delete the\n    // old image file on the server\n    if (oldBlock.imageUrl && oldBlock.imageUrl !== currentBlock.imageUrl) {\n      deleteImageOnServer(oldBlock.imageUrl);\n    }\n  };\n\n  const addBlockHandler = (currentBlock) => {\n    setCurrentBlockId(currentBlock.id);\n    const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n    const updatedBlocks = [...blocks];\n    const newBlock = { _id: objectId(), tag: \"p\", html: \"\", imageUrl: \"\" };\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl,\n    };\n    setBlocks(updatedBlocks);\n  };\n\n  const deleteBlockHandler = (currentBlock) => {\n    if (blocks.length > 1) {\n      setCurrentBlockId(currentBlock.id);\n      const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n      const deletedBlock = blocks[index];\n      const updatedBlocks = [...blocks];\n      updatedBlocks.splice(index, 1);\n      setBlocks(updatedBlocks);\n      // If the deleted block was an image block, we have to delete\n      // the image file on the server\n      if (deletedBlock.tag === \"img\" && deletedBlock.imageUrl) {\n        deleteImageOnServer(deletedBlock.imageUrl);\n      }\n    }\n  };\n\n  const onDragEndHandler = (result) => {\n    const { destination, source } = result;\n\n    // If we don't have a destination (due to dropping outside the droppable)\n    // or the destination hasn't changed, we change nothing\n    if (!destination || destination.index === source.index) {\n      return;\n    }\n\n    const updatedBlocks = [...blocks];\n    const removedBlocks = updatedBlocks.splice(source.index - 1, 1);\n    updatedBlocks.splice(destination.index - 1, 0, removedBlocks[0]);\n    setBlocks(updatedBlocks);\n  };\n\n  const isNewPublicPage = router.query.public === \"true\";\n  return (\n    <>\n      {isNewPublicPage && (\n        <Notice dismissible>\n          <h4>Hey 👋 You just created a public page.</h4>\n          <p>It will be automatically deleted after 24 hours.</p>\n        </Notice>\n      )}\n      <DragDropContext onDragEnd={onDragEndHandler}>\n        <Droppable droppableId={id}>\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              {blocks.map((block) => {\n                const position =\n                  blocks.map((b) => b._id).indexOf(block._id) + 1;\n                return (\n                  <EditableBlock\n                    key={block._id}\n                    position={position}\n                    id={block._id}\n                    tag={block.tag}\n                    html={block.html}\n                    imageUrl={block.imageUrl}\n                    pageId={id}\n                    addBlock={addBlockHandler}\n                    deleteBlock={deleteBlockHandler}\n                    updateBlock={updateBlockHandler}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default EditablePage;\n"]},"metadata":{},"sourceType":"module"}