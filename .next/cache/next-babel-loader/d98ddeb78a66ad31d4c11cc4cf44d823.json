{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/project/notion-clone/components/editablePage/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport EditableBlock from \"../editableBlock\";\nimport Notice from \"../notice\";\nimport { usePrevious } from \"../../hooks\";\nimport { objectId, setCaretToEnd } from \"../../utils\"; // A page is represented by an array containing several blocks\n// [\n//   {\n//     _id: \"5f54d75b114c6d176d7e9765\",\n//     html: \"Heading\",\n//     tag: \"h1\",\n//     imageUrl: \"\",\n//   },\n//   {\n//     _id: \"5f54d75b114c6d176d7e9766\",\n//     html: \"I am a <strong>paragraph</strong>\",\n//     tag: \"p\",\n//     imageUrl: \"\",\n//   },\n//     _id: \"5f54d75b114c6d176d7e9767\",\n//     html: \"/im\",\n//     tag: \"img\",\n//     imageUrl: \"images/test.png\",\n//   }\n// ]\n\nvar EditablePage = function EditablePage(_ref) {\n  _s();\n\n  var id = _ref.id,\n      fetchedBlocks = _ref.fetchedBlocks,\n      err = _ref.err;\n\n  if (err) {\n    return __jsx(Notice, {\n      status: \"ERROR\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Something went wrong \\uD83D\\uDC94\"), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"Have you tried to restart the app at '/' ?\"));\n  }\n\n  var router = useRouter();\n\n  var _useState = useState(fetchedBlocks),\n      blocks = _useState[0],\n      setBlocks = _useState[1];\n\n  var _useState2 = useState(null),\n      currentBlockId = _useState2[0],\n      setCurrentBlockId = _useState2[1];\n\n  var prevBlocks = usePrevious(blocks); // Update the database whenever blocks change\n\n  useEffect(function () {\n    var updatePageOnServer = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blocks) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(\"\".concat(process.env.NEXT_PUBLIC_API, \"/pages/\").concat(id), {\n                  method: \"PUT\",\n                  credentials: \"include\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    blocks: blocks\n                  })\n                });\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 5]]);\n      }));\n\n      return function updatePageOnServer(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (prevBlocks && prevBlocks !== blocks) {\n      updatePageOnServer(blocks);\n    }\n  }, [blocks, prevBlocks]); // Handling the cursor and focus on adding and deleting blocks\n\n  useEffect(function () {\n    // If a new block was added, move the caret to it\n    if (prevBlocks && prevBlocks.length + 1 === blocks.length) {\n      var nextBlockPosition = blocks.map(function (b) {\n        return b._id;\n      }).indexOf(currentBlockId) + 1 + 1;\n      var nextBlock = document.querySelector(\"[data-position=\\\"\".concat(nextBlockPosition, \"\\\"]\"));\n\n      if (nextBlock) {\n        nextBlock.focus();\n      }\n    } // If a block was deleted, move the caret to the end of the last block\n\n\n    if (prevBlocks && prevBlocks.length - 1 === blocks.length) {\n      var lastBlockPosition = prevBlocks.map(function (b) {\n        return b._id;\n      }).indexOf(currentBlockId);\n      var lastBlock = document.querySelector(\"[data-position=\\\"\".concat(lastBlockPosition, \"\\\"]\"));\n\n      if (lastBlock) {\n        setCaretToEnd(lastBlock);\n      }\n    }\n  }, [blocks, prevBlocks, currentBlockId]);\n\n  var deleteImageOnServer = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(imageUrl) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch(\"\".concat(process.env.NEXT_PUBLIC_API, \"/pages/\").concat(imageUrl), {\n                method: \"DELETE\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function deleteImageOnServer(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var updateBlockHandler = function updateBlockHandler(currentBlock) {\n    var index = blocks.map(function (b) {\n      return b._id;\n    }).indexOf(currentBlock.id);\n    var oldBlock = blocks[index];\n\n    var updatedBlocks = _toConsumableArray(blocks);\n\n    updatedBlocks[index] = _objectSpread(_objectSpread({}, updatedBlocks[index]), {}, {\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl\n    });\n    setBlocks(updatedBlocks); // If the image has been changed, we have to delete the\n    // old image file on the server\n\n    if (oldBlock.imageUrl && oldBlock.imageUrl !== currentBlock.imageUrl) {\n      deleteImageOnServer(oldBlock.imageUrl);\n    }\n  };\n\n  var addBlockHandler = function addBlockHandler(currentBlock) {\n    setCurrentBlockId(currentBlock.id);\n    var index = blocks.map(function (b) {\n      return b._id;\n    }).indexOf(currentBlock.id);\n\n    var updatedBlocks = _toConsumableArray(blocks);\n\n    var newBlock = {\n      _id: objectId(),\n      tag: \"p\",\n      html: \"\",\n      imageUrl: \"\"\n    };\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    updatedBlocks[index] = _objectSpread(_objectSpread({}, updatedBlocks[index]), {}, {\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl\n    });\n    setBlocks(updatedBlocks);\n  };\n\n  var deleteBlockHandler = function deleteBlockHandler(currentBlock) {\n    if (blocks.length > 1) {\n      setCurrentBlockId(currentBlock.id);\n      var index = blocks.map(function (b) {\n        return b._id;\n      }).indexOf(currentBlock.id);\n      var deletedBlock = blocks[index];\n\n      var updatedBlocks = _toConsumableArray(blocks);\n\n      updatedBlocks.splice(index, 1);\n      setBlocks(updatedBlocks); // If the deleted block was an image block, we have to delete\n      // the image file on the server\n\n      if (deletedBlock.tag === \"img\" && deletedBlock.imageUrl) {\n        deleteImageOnServer(deletedBlock.imageUrl);\n      }\n    }\n  };\n\n  var onDragEndHandler = function onDragEndHandler(result) {\n    var destination = result.destination,\n        source = result.source; // If we don't have a destination (due to dropping outside the droppable)\n    // or the destination hasn't changed, we change nothing\n\n    if (!destination || destination.index === source.index) {\n      return;\n    }\n\n    var updatedBlocks = _toConsumableArray(blocks);\n\n    var removedBlocks = updatedBlocks.splice(source.index - 1, 1);\n    updatedBlocks.splice(destination.index - 1, 0, removedBlocks[0]);\n    setBlocks(updatedBlocks);\n  };\n\n  var isNewPublicPage = router.query[\"public\"] === \"true\";\n  return __jsx(React.Fragment, null, isNewPublicPage && __jsx(Notice, {\n    dismissible: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Hey \\uD83D\\uDC4B You just created a public page.\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"It will be automatically deleted after 24 hours.\")), __jsx(DragDropContext, {\n    onDragEnd: onDragEndHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, __jsx(Droppable, {\n    droppableId: id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, function (provided) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), blocks.map(function (block) {\n      var position = blocks.map(function (b) {\n        return b._id;\n      }).indexOf(block._id) + 1;\n      return __jsx(EditableBlock, {\n        key: block._id,\n        position: position,\n        id: block._id,\n        tag: block.tag,\n        html: block.html,\n        imageUrl: block.imageUrl,\n        pageId: id,\n        addBlock: addBlockHandler,\n        deleteBlock: deleteBlockHandler,\n        updateBlock: updateBlockHandler,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 19\n        }\n      });\n    }), provided.placeholder);\n  })));\n};\n\n_s(EditablePage, \"YOE2g+kGzYdxJcYChF1hz8e+b9Y=\", false, function () {\n  return [useRouter, usePrevious];\n});\n\n_c = EditablePage;\nexport default EditablePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditablePage\");","map":{"version":3,"sources":["/project/notion-clone/components/editablePage/index.js"],"names":["useState","useEffect","useRouter","DragDropContext","Droppable","EditableBlock","Notice","usePrevious","objectId","setCaretToEnd","EditablePage","id","fetchedBlocks","err","router","blocks","setBlocks","currentBlockId","setCurrentBlockId","prevBlocks","updatePageOnServer","fetch","process","env","NEXT_PUBLIC_API","method","credentials","headers","body","JSON","stringify","console","log","length","nextBlockPosition","map","b","_id","indexOf","nextBlock","document","querySelector","focus","lastBlockPosition","lastBlock","deleteImageOnServer","imageUrl","Accept","response","json","updateBlockHandler","currentBlock","index","oldBlock","updatedBlocks","tag","html","addBlockHandler","newBlock","splice","deleteBlockHandler","deletedBlock","onDragEndHandler","result","destination","source","removedBlocks","isNewPublicPage","query","provided","innerRef","droppableProps","block","position","placeholder"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport EditableBlock from \"../editableBlock\";\nimport Notice from \"../notice\";\nimport { usePrevious } from \"../../hooks\";\nimport { objectId, setCaretToEnd } from \"../../utils\";\n\n// A page is represented by an array containing several blocks\n// [\n//   {\n//     _id: \"5f54d75b114c6d176d7e9765\",\n//     html: \"Heading\",\n//     tag: \"h1\",\n//     imageUrl: \"\",\n//   },\n//   {\n//     _id: \"5f54d75b114c6d176d7e9766\",\n//     html: \"I am a <strong>paragraph</strong>\",\n//     tag: \"p\",\n//     imageUrl: \"\",\n//   },\n//     _id: \"5f54d75b114c6d176d7e9767\",\n//     html: \"/im\",\n//     tag: \"img\",\n//     imageUrl: \"images/test.png\",\n//   }\n// ]\n\nconst EditablePage = ({ id, fetchedBlocks, err }) => {\n  if (err) {\n    return (\n      <Notice status=\"ERROR\">\n        <h3>Something went wrong 💔</h3>\n        <p>Have you tried to restart the app at '/' ?</p>\n      </Notice>\n    );\n  }\n\n  const router = useRouter();\n  const [blocks, setBlocks] = useState(fetchedBlocks);\n  const [currentBlockId, setCurrentBlockId] = useState(null);\n\n  const prevBlocks = usePrevious(blocks);\n\n  // Update the database whenever blocks change\n  useEffect(() => {\n    const updatePageOnServer = async (blocks) => {\n      try {\n        await fetch(`${process.env.NEXT_PUBLIC_API}/pages/${id}`, {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            blocks: blocks,\n          }),\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    if (prevBlocks && prevBlocks !== blocks) {\n      updatePageOnServer(blocks);\n    }\n  }, [blocks, prevBlocks]);\n\n  // Handling the cursor and focus on adding and deleting blocks\n  useEffect(() => {\n    // If a new block was added, move the caret to it\n    if (prevBlocks && prevBlocks.length + 1 === blocks.length) {\n      const nextBlockPosition =\n        blocks.map((b) => b._id).indexOf(currentBlockId) + 1 + 1;\n      const nextBlock = document.querySelector(\n        `[data-position=\"${nextBlockPosition}\"]`\n      );\n      if (nextBlock) {\n        nextBlock.focus();\n      }\n    }\n    // If a block was deleted, move the caret to the end of the last block\n    if (prevBlocks && prevBlocks.length - 1 === blocks.length) {\n      const lastBlockPosition = prevBlocks\n        .map((b) => b._id)\n        .indexOf(currentBlockId);\n      const lastBlock = document.querySelector(\n        `[data-position=\"${lastBlockPosition}\"]`\n      );\n      if (lastBlock) {\n        setCaretToEnd(lastBlock);\n      }\n    }\n  }, [blocks, prevBlocks, currentBlockId]);\n\n  const deleteImageOnServer = async (imageUrl) => {\n    // The imageUrl contains images/name.jpg, hence we do not need\n    // to explicitly add the /images endpoint in the API url\n    try {\n      const response = await fetch(\n        `${process.env.NEXT_PUBLIC_API}/pages/${imageUrl}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      await response.json();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateBlockHandler = (currentBlock) => {\n    const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n    const oldBlock = blocks[index];\n    const updatedBlocks = [...blocks];\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl,\n    };\n    setBlocks(updatedBlocks);\n    // If the image has been changed, we have to delete the\n    // old image file on the server\n    if (oldBlock.imageUrl && oldBlock.imageUrl !== currentBlock.imageUrl) {\n      deleteImageOnServer(oldBlock.imageUrl);\n    }\n  };\n\n  const addBlockHandler = (currentBlock) => {\n    setCurrentBlockId(currentBlock.id);\n    const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n    const updatedBlocks = [...blocks];\n    const newBlock = { _id: objectId(), tag: \"p\", html: \"\", imageUrl: \"\" };\n    updatedBlocks.splice(index + 1, 0, newBlock);\n    updatedBlocks[index] = {\n      ...updatedBlocks[index],\n      tag: currentBlock.tag,\n      html: currentBlock.html,\n      imageUrl: currentBlock.imageUrl,\n    };\n    setBlocks(updatedBlocks);\n  };\n\n  const deleteBlockHandler = (currentBlock) => {\n    if (blocks.length > 1) {\n      setCurrentBlockId(currentBlock.id);\n      const index = blocks.map((b) => b._id).indexOf(currentBlock.id);\n      const deletedBlock = blocks[index];\n      const updatedBlocks = [...blocks];\n      updatedBlocks.splice(index, 1);\n      setBlocks(updatedBlocks);\n      // If the deleted block was an image block, we have to delete\n      // the image file on the server\n      if (deletedBlock.tag === \"img\" && deletedBlock.imageUrl) {\n        deleteImageOnServer(deletedBlock.imageUrl);\n      }\n    }\n  };\n\n  const onDragEndHandler = (result) => {\n    const { destination, source } = result;\n\n    // If we don't have a destination (due to dropping outside the droppable)\n    // or the destination hasn't changed, we change nothing\n    if (!destination || destination.index === source.index) {\n      return;\n    }\n\n    const updatedBlocks = [...blocks];\n    const removedBlocks = updatedBlocks.splice(source.index - 1, 1);\n    updatedBlocks.splice(destination.index - 1, 0, removedBlocks[0]);\n    setBlocks(updatedBlocks);\n  };\n\n  const isNewPublicPage = router.query.public === \"true\";\n  return (\n    <>\n      {isNewPublicPage && (\n        <Notice dismissible>\n          <h4>Hey 👋 You just created a public page.</h4>\n          <p>It will be automatically deleted after 24 hours.</p>\n        </Notice>\n      )}\n      <DragDropContext onDragEnd={onDragEndHandler}>\n        <Droppable droppableId={id}>\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              {blocks.map((block) => {\n                const position =\n                  blocks.map((b) => b._id).indexOf(block._id) + 1;\n                return (\n                  <EditableBlock\n                    key={block._id}\n                    position={position}\n                    id={block._id}\n                    tag={block.tag}\n                    html={block.html}\n                    imageUrl={block.imageUrl}\n                    pageId={id}\n                    addBlock={addBlockHandler}\n                    deleteBlock={deleteBlockHandler}\n                    updateBlock={updateBlockHandler}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default EditablePage;\n"]},"metadata":{},"sourceType":"module"}