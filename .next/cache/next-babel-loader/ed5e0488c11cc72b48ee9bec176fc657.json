{"ast":null,"code":"var _jsxFileName = \"/project/notion-clone/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EditablePage from \"../components/editablePage\"; // If a user hits \"/\", we create a blank page and redirect to that page\n// so that each user gets his/her personal space to test things\n\nconst IndexPage = ({\n  pid,\n  blocks,\n  err\n}) => {\n  return __jsx(EditablePage, {\n    id: pid,\n    fetchedBlocks: blocks,\n    err: err,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 10\n    }\n  });\n};\n\nexport const getServerSideProps = async context => {\n  const blocks = [{\n    tag: \"p\",\n    html: \"\",\n    imageUrl: \"\"\n  }];\n  const res = context.res;\n  const req = context.req;\n\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_API}/pages`, {\n      method: \"POST\",\n      credentials: \"include\",\n      // Forward the authentication cookie to the backend\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Cookie: req ? req.headers.cookie : undefined\n      },\n      body: JSON.stringify({\n        blocks: blocks\n      })\n    });\n    const data = await response.json();\n    const pageId = data.pageId;\n    const creator = data.creator;\n    const query = !creator ? \"?public=true\" : \"\"; // needed to show notice\n\n    res.writeHead(302, {\n      Location: `/p/${pageId}${query}`\n    });\n    res.end();\n    return {\n      props: {}\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      props: {\n        blocks: null,\n        pid: null,\n        err: true\n      }\n    };\n  }\n};\nexport default IndexPage;","map":{"version":3,"sources":["/project/notion-clone/pages/index.js"],"names":["EditablePage","IndexPage","pid","blocks","err","getServerSideProps","context","tag","html","imageUrl","res","req","response","fetch","process","env","NEXT_PUBLIC_API","method","credentials","headers","Cookie","cookie","undefined","body","JSON","stringify","data","json","pageId","creator","query","writeHead","Location","end","props","console","log"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,4BAAzB,C,CAEA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,MAAP;AAAeC,EAAAA;AAAf,CAAD,KAA0B;AAC1C,SAAO,MAAC,YAAD;AAAc,IAAA,EAAE,EAAEF,GAAlB;AAAuB,IAAA,aAAa,EAAEC,MAAtC;AAA8C,IAAA,GAAG,EAAEC,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AACnD,QAAMH,MAAM,GAAG,CAAC;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,IAAI,EAAE,EAAlB;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,GAAD,CAAf;AACA,QAAMC,GAAG,GAAGJ,OAAO,CAACI,GAApB;AACA,QAAMC,GAAG,GAAGL,OAAO,CAACK,GAApB;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,eAAgB,QAAhC,EAAyC;AACnEC,MAAAA,MAAM,EAAE,MAD2D;AAEnEC,MAAAA,WAAW,EAAE,SAFsD;AAGnE;AACAC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAET,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAYE,MAAf,GAAwBC;AAF5B,OAJ0D;AAQnEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBtB,QAAAA,MAAM,EAAEA;AADW,OAAf;AAR6D,KAAzC,CAA5B;AAYA,UAAMuB,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB;AACA,UAAMC,OAAO,GAAGH,IAAI,CAACG,OAArB;AACA,UAAMC,KAAK,GAAG,CAACD,OAAD,GAAW,cAAX,GAA4B,EAA1C,CAhBE,CAgB4C;;AAC9CnB,IAAAA,GAAG,CAACqB,SAAJ,CAAc,GAAd,EAAmB;AAAEC,MAAAA,QAAQ,EAAG,MAAKJ,MAAO,GAAEE,KAAM;AAAjC,KAAnB;AACApB,IAAAA,GAAG,CAACuB,GAAJ;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD,GApBD,CAoBE,OAAO9B,GAAP,EAAY;AACZ+B,IAAAA,OAAO,CAACC,GAAR,CAAYhC,GAAZ;AACA,WAAO;AAAE8B,MAAAA,KAAK,EAAE;AAAE/B,QAAAA,MAAM,EAAE,IAAV;AAAgBD,QAAAA,GAAG,EAAE,IAArB;AAA2BE,QAAAA,GAAG,EAAE;AAAhC;AAAT,KAAP;AACD;AACF,CA5BM;AA8BP,eAAeH,SAAf","sourcesContent":["import EditablePage from \"../components/editablePage\";\n\n// If a user hits \"/\", we create a blank page and redirect to that page\n// so that each user gets his/her personal space to test things\n\nconst IndexPage = ({ pid, blocks, err }) => {\n  return <EditablePage id={pid} fetchedBlocks={blocks} err={err} />;\n};\n\nexport const getServerSideProps = async (context) => {\n  const blocks = [{ tag: \"p\", html: \"\", imageUrl: \"\" }];\n  const res = context.res;\n  const req = context.req;\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_API}/pages`, {\n      method: \"POST\",\n      credentials: \"include\",\n      // Forward the authentication cookie to the backend\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Cookie: req ? req.headers.cookie : undefined,\n      },\n      body: JSON.stringify({\n        blocks: blocks,\n      }),\n    });\n    const data = await response.json();\n    const pageId = data.pageId;\n    const creator = data.creator;\n    const query = !creator ? \"?public=true\" : \"\"; // needed to show notice\n    res.writeHead(302, { Location: `/p/${pageId}${query}` });\n    res.end();\n    return { props: {} };\n  } catch (err) {\n    console.log(err);\n    return { props: { blocks: null, pid: null, err: true } };\n  }\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}