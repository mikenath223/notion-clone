{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/project/notion-clone/context/UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useReducer, useEffect } from \"react\";\nexport var UserStateContext = /*#__PURE__*/createContext();\nexport var UserDispatchContext = /*#__PURE__*/createContext(); // const initialState = {\n//   isAuth: false,\n// };\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      {\n        return {\n          isAuth: true\n        };\n      }\n\n    case \"LOGOUT\":\n      {\n        return {\n          isAuth: false\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled action type.\");\n      }\n  }\n};\n\nvar UserProvider = function UserProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      isAuthenticated = _ref.isAuthenticated;\n\n  var _useReducer = useReducer(reducer, {\n    isAuth: isAuthenticated\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  useEffect(function () {\n    if (isAuthenticated) {\n      dispatch({\n        type: \"LOGIN\"\n      });\n    } else {\n      dispatch({\n        type: \"LOGOUT\"\n      });\n    }\n  }, [isAuthenticated]);\n  return __jsx(UserStateContext.Provider, {\n    value: state,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(UserDispatchContext.Provider, {\n    value: dispatch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, children));\n};\n\n_s(UserProvider, \"Mn0VR8TIEuOqIWCjOVAHqLe8qgQ=\");\n\n_c = UserProvider;\nexport default UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/project/notion-clone/context/UserContext.js"],"names":["createContext","useReducer","useEffect","UserStateContext","UserDispatchContext","reducer","state","action","type","isAuth","Error","UserProvider","children","isAuthenticated","dispatch"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,QAAqD,OAArD;AAEA,OAAO,IAAMC,gBAAgB,gBAAGH,aAAa,EAAtC;AACP,OAAO,IAAMI,mBAAmB,gBAAGJ,aAAa,EAAzC,C,CAEP;AACA;AACA;;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AAAc;AACZ,eAAO;AACLC,UAAAA,MAAM,EAAE;AADH,SAAP;AAGD;;AACD,SAAK,QAAL;AAAe;AACb,eAAO;AACLA,UAAAA,MAAM,EAAE;AADH,SAAP;AAGD;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;AAbH;AAeD,CAhBD;;AAkBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAmC;AAAA;;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,eAAsB,QAAtBA,eAAsB;;AAAA,oBAC5BZ,UAAU,CAACI,OAAD,EAAU;AAAEI,IAAAA,MAAM,EAAEI;AAAV,GAAV,CADkB;AAAA,MAC/CP,KAD+C;AAAA,MACxCQ,QADwC;;AAGtDZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,eAAJ,EAAqB;AACnBC,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAFD,MAEO;AACLM,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD;AACF,GANQ,EAMN,CAACK,eAAD,CANM,CAAT;AAQA,SACE,MAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEP,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEQ,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF,CADF;AAOD,CAlBD;;GAAMD,Y;;KAAAA,Y;AAoBN,eAAeA,YAAf","sourcesContent":["import { createContext, useReducer, useEffect } from \"react\";\n\nexport const UserStateContext = createContext();\nexport const UserDispatchContext = createContext();\n\n// const initialState = {\n//   isAuth: false,\n// };\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\": {\n      return {\n        isAuth: true,\n      };\n    }\n    case \"LOGOUT\": {\n      return {\n        isAuth: false,\n      };\n    }\n    default: {\n      throw new Error(\"Unhandled action type.\");\n    }\n  }\n};\n\nconst UserProvider = ({ children, isAuthenticated }) => {\n  const [state, dispatch] = useReducer(reducer, { isAuth: isAuthenticated });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      dispatch({ type: \"LOGIN\" });\n    } else {\n      dispatch({ type: \"LOGOUT\" });\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n  );\n};\n\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}