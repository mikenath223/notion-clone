{"ast":null,"code":"var _jsxFileName = \"/project/notion-clone/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from \"next/app\";\nimport cookies from \"next-cookies\";\nimport UserProvider from \"../context/UserContext\";\nimport Layout from \"../components/layout\";\nimport \"typeface-nunito-sans\";\nimport \"typeface-roboto\";\nimport \"../shared/global.scss\";\n\nconst MyApp = ({\n  Component,\n  pageProps,\n  isAuthenticated\n}) => {\n  return __jsx(UserProvider, {\n    isAuthenticated: isAuthenticated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }))));\n};\n\nMyApp.getInitialProps = async context => {\n  let isAuthenticated = false; // WARNING - We only check if a cookie called token is present\n  // We do not verify the token on the server at this point\n  // In this case, it might be fine since we only need the auth state\n  // for UI purposes. Any sensitive data fetch is secured separately\n\n  const {\n    token\n  } = cookies(context.ctx);\n\n  if (token) {\n    isAuthenticated = true;\n  }\n\n  const appProps = await App.getInitialProps(context);\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    isAuthenticated\n  });\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/project/notion-clone/pages/_app.js"],"names":["App","cookies","UserProvider","Layout","MyApp","Component","pageProps","isAuthenticated","getInitialProps","context","token","ctx","appProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAO,sBAAP;AACA,OAAO,iBAAP;AACA,OAAO,uBAAP;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAD,KAA+C;AAC3D,SACE,MAAC,YAAD;AAAc,IAAA,eAAe,EAAEA,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CADF;AAOD,CARD;;AAUAF,KAAK,CAACI,eAAN,GAAwB,MAAOC,OAAP,IAAmB;AACzC,MAAIF,eAAe,GAAG,KAAtB,CADyC,CAGzC;AACA;AACA;AACA;;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYT,OAAO,CAACQ,OAAO,CAACE,GAAT,CAAzB;;AACA,MAAID,KAAJ,EAAW;AACTH,IAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,QAAMK,QAAQ,GAAG,MAAMZ,GAAG,CAACQ,eAAJ,CAAoBC,OAApB,CAAvB;AACA,yCAAYG,QAAZ;AAAsBL,IAAAA;AAAtB;AACD,CAdD;;AAgBA,eAAeH,KAAf","sourcesContent":["import App from \"next/app\";\nimport cookies from \"next-cookies\";\n\nimport UserProvider from \"../context/UserContext\";\nimport Layout from \"../components/layout\";\n\nimport \"typeface-nunito-sans\";\nimport \"typeface-roboto\";\nimport \"../shared/global.scss\";\n\nconst MyApp = ({ Component, pageProps, isAuthenticated }) => {\n  return (\n    <UserProvider isAuthenticated={isAuthenticated}>\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </UserProvider>\n  );\n};\n\nMyApp.getInitialProps = async (context) => {\n  let isAuthenticated = false;\n\n  // WARNING - We only check if a cookie called token is present\n  // We do not verify the token on the server at this point\n  // In this case, it might be fine since we only need the auth state\n  // for UI purposes. Any sensitive data fetch is secured separately\n  const { token } = cookies(context.ctx);\n  if (token) {\n    isAuthenticated = true;\n  }\n\n  const appProps = await App.getInitialProps(context);\n  return { ...appProps, isAuthenticated };\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}